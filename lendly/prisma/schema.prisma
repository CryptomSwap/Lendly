// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum ItemCategory {
  GARDENING
  CONSTRUCTION
  EVENTS
  DRONE
  CAMERA
  LENS
  POWER_TOOL
  CAMPING
  AUDIO_PA
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  DISPUTED
}

enum VerificationStatus {
  UNVERIFIED
  PENDING
  VERIFIED
  REJECTED
}

model User {
  id               String   @id @default(cuid())
  email            String   @unique
  hashedPassword   String?
  name             String?
  phone            String?
  role             Role     @default(USER)
  stripeCustomerId String?  @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  verification     Verification?
  items            Item[]
  bookings         Booking[] @relation("RenterBookings")
  ownerBookings    Booking[] @relation("OwnerBookings")
  reviews          Review[]
}

model Verification {
  id         String             @id @default(cuid())
  userId     String             @unique
  provider   String
  status     VerificationStatus @default(UNVERIFIED)
  riskScore  Int?
  documentId String?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  user       User               @relation(fields: [userId], references: [id])
}

model Item {
  id            String        @id @default(cuid())
  ownerId       String
  title         String
  description   String
  category      ItemCategory
  dailyPriceILS Int
  depositILS    Int
  latitude      Float
  longitude     Float
  city          String
  images        String[]
  specs         Json?
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  owner         User          @relation(fields: [ownerId], references: [id])
  availability  Availability[]
  bookings      Booking[]     @relation("ItemBookings")
  averageRating Float         @default(0)
  reviewCount   Int           @default(0)

  @@index([city])
  @@index([latitude, longitude])
}

model Availability {
  id        String   @id @default(cuid())
  itemId    String
  startDate DateTime
  endDate   DateTime
  item      Item     @relation(fields: [itemId], references: [id])
  @@index([itemId, startDate, endDate])
}

model Booking {
  id                           String         @id @default(cuid())
  itemId                       String
  renterId                     String
  ownerId                      String
  startDate                    DateTime
  endDate                      DateTime
  status                       BookingStatus  @default(PENDING)
  subtotalILS                  Int
  insuranceILS                 Int            @default(0)
  platformFeeILS               Int            @default(0)
  depositILS                   Int
  currency                     String         @default("ILS")
  stripePaymentIntentId        String?
  stripeDepositPaymentIntentId String?
  createdAt                    DateTime       @default(now())
  updatedAt                    DateTime       @updatedAt

  item     Item   @relation("ItemBookings", fields: [itemId], references: [id])
  renter   User   @relation("RenterBookings", fields: [renterId], references: [id])
  owner    User   @relation("OwnerBookings", fields: [ownerId], references: [id])
  messages Message[]
  review   Review?
}

model Message {
  id        String   @id @default(cuid())
  bookingId String
  senderId  String
  body      String
  createdAt DateTime @default(now())
  booking   Booking  @relation(fields: [bookingId], references: [id])
  @@index([bookingId, createdAt])
}

model Review {
  id        String   @id @default(cuid())
  bookingId String   @unique
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  booking   Booking  @relation(fields: [bookingId], references: [id])
}
